package LightUp.LightUpModel;

/*Generated by MPS */

import ActOne.runtime.predefined.BOOLEAN;
import ActOne.runtime.predefined.INTEGER;
import ActOne.runtime.predefined.STRING;
import ActOne.runtime.predefined.ANY;
import ActOne.runtime.model.ITerm;
import ActOne.runtime.model.Operator;
import ActOne.runtime.predefined.BOOLEAN.Bool;
import ActOne.runtime.model.Reductions;

public abstract class LightUpSpesification {

  public static Object dummy_BOOLEAN() {
    // init connection to imported sort BOOLEAN.Bool
    return null;
  }
  public static Object dummy_INTEGER() {
    // init connection to imported sort INTEGER.Int
    return null;
  }
  public static BOOLEAN.Bool dummy_bool() {
    // init connection to Bool
    return null;
  }
  public static INTEGER.Int dummy_int() {
    // init connection to Int
    return null;
  }
  public static STRING.String dummy_string() {
    // init connection to String
    return null;
  }
  public static ANY.Any dummy_any() {
    // init connection to Any
    return null;
  }

  public static class LightUp extends ITerm {

    public LightUp(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public LightUp(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class Line extends ITerm {

    public Line(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public Line(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class SightLine extends ITerm {

    public SightLine(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public SightLine(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class Box extends ITerm {

    public Box(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public Box(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }
  public static class LightBulb extends ITerm {

    public LightBulb(ITerm.Kind kind, String name) {
      super(kind, name);
    }

    public LightBulb(Operator operator, ITerm... params) {
      super(operator, params);
    }
  }


  public static final LightUp LU = new LightUp(ITerm.Kind.VARIABLE, "LU");
  public static final Line l1 = new Line(ITerm.Kind.VARIABLE, "l1");
  public static final Line l2 = new Line(ITerm.Kind.VARIABLE, "l2");
  public static final Line l3 = new Line(ITerm.Kind.VARIABLE, "l3");
  public static final Line l4 = new Line(ITerm.Kind.VARIABLE, "l4");
  public static final Line l5 = new Line(ITerm.Kind.VARIABLE, "l5");
  public static final Box AnyBox = new Box(ITerm.Kind.VARIABLE, "AnyBox");
  public static final Box B1_1 = new Box(ITerm.Kind.VARIABLE, "B1_1");
  public static final Box B1_2 = new Box(ITerm.Kind.VARIABLE, "B1_2");
  public static final Box B1_3 = new Box(ITerm.Kind.VARIABLE, "B1_3");
  public static final Box B1_4 = new Box(ITerm.Kind.VARIABLE, "B1_4");
  public static final Box B1_5 = new Box(ITerm.Kind.VARIABLE, "B1_5");
  public static final Box B2_1 = new Box(ITerm.Kind.VARIABLE, "B2_1");
  public static final Box B2_2 = new Box(ITerm.Kind.VARIABLE, "B2_2");
  public static final Box B2_3 = new Box(ITerm.Kind.VARIABLE, "B2_3");
  public static final Box B2_4 = new Box(ITerm.Kind.VARIABLE, "B2_4");
  public static final Box B2_5 = new Box(ITerm.Kind.VARIABLE, "B2_5");
  public static final Box B3_1 = new Box(ITerm.Kind.VARIABLE, "B3_1");
  public static final Box B3_2 = new Box(ITerm.Kind.VARIABLE, "B3_2");
  public static final Box B3_3 = new Box(ITerm.Kind.VARIABLE, "B3_3");
  public static final Box B3_4 = new Box(ITerm.Kind.VARIABLE, "B3_4");
  public static final Box B3_5 = new Box(ITerm.Kind.VARIABLE, "B3_5");
  public static final Box B4_1 = new Box(ITerm.Kind.VARIABLE, "B4_1");
  public static final Box B4_2 = new Box(ITerm.Kind.VARIABLE, "B4_2");
  public static final Box B4_3 = new Box(ITerm.Kind.VARIABLE, "B4_3");
  public static final Box B4_4 = new Box(ITerm.Kind.VARIABLE, "B4_4");
  public static final Box B4_5 = new Box(ITerm.Kind.VARIABLE, "B4_5");
  public static final Box B5_1 = new Box(ITerm.Kind.VARIABLE, "B5_1");
  public static final Box B5_2 = new Box(ITerm.Kind.VARIABLE, "B5_2");
  public static final Box B5_3 = new Box(ITerm.Kind.VARIABLE, "B5_3");
  public static final Box B5_4 = new Box(ITerm.Kind.VARIABLE, "B5_4");
  public static final Box B5_5 = new Box(ITerm.Kind.VARIABLE, "B5_5");

  private static final Operator oper_mkLightUp = new Operator(true, "mkLightUp");
  private static final Operator oper_mkLine = new Operator(true, "mkLine");
  private static final Operator oper_mkSightLine = new Operator(true, "mkSightLine");
  private static final Operator oper__1 = new Operator(true, "_1");
  private static final Operator oper__2 = new Operator(true, "_2");
  private static final Operator oper__3 = new Operator(true, "_3");
  private static final Operator oper__4 = new Operator(true, "_4");
  private static final Operator oper__X = new Operator(true, "_X");
  private static final Operator oper__W = new Operator(true, "_W");
  private static final Operator oper_CheckSightLine = new Operator(false, "CheckSightLine");
  private static final Operator oper_CheckBox = new Operator(false, "CheckBox");
  private static final Operator oper_CorrectPuzzle = new Operator(false, "CorrectPuzzle");
  private static final Operator oper_Transpose = new Operator(false, "Transpose");

  public static LightUp mkLightUp(Line Line_0, Line Line_1, Line Line_2, Line Line_3, Line Line_4) {
    return new LightUp(oper_mkLightUp, Line_0, Line_1, Line_2, Line_3, Line_4);
  }
  public static Line mkLine(Box Box_0, Box Box_1, Box Box_2, Box Box_3, Box Box_4) {
    return new Line(oper_mkLine, Box_0, Box_1, Box_2, Box_3, Box_4);
  }
  public static SightLine mkSightLine(Line Line_5) {
    return new SightLine(oper_mkSightLine, Line_5);
  }
  public static Box _1() {
    return new Box(oper__1);
  }
  public static Box _2() {
    return new Box(oper__2);
  }
  public static Box _3() {
    return new Box(oper__3);
  }
  public static Box _4() {
    return new Box(oper__4);
  }
  public static Box _X() {
    return new Box(oper__X);
  }
  public static Box _W() {
    return new Box(oper__W);
  }
  public static Bool CheckSightLine(Line Line_6) {
    return new Bool(oper_CheckSightLine, Line_6);
  }
  public static Bool CheckBox(Box Box_5) {
    return new Bool(oper_CheckBox, Box_5);
  }
  public static Bool CorrectPuzzle(LightUp LightUp_0) {
    return new Bool(oper_CorrectPuzzle, LightUp_0);
  }
  public static LightUp Transpose(LightUp LightUp_1) {
    return new LightUp(oper_Transpose, LightUp_1);
  }

  /*package*/ static void initAxioms() {
    System.out.println("Using axioms of " + "LightUpSpesification");
    ITerm.axiom(LightUpSpesification.CheckBox(LightUpSpesification.AnyBox), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Equal(LightUpSpesification._4(), LightUpSpesification.AnyBox)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Equal(LightUpSpesification._3(), LightUpSpesification.AnyBox)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Equal(LightUpSpesification._2(), LightUpSpesification.AnyBox)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Equal(LightUpSpesification._1(), LightUpSpesification.AnyBox)), BOOLEAN.If_Then_Else(BOOLEAN.Not(BOOLEAN.Equal(LightUpSpesification._X(), LightUpSpesification.AnyBox)), BOOLEAN.If_Then_Else(BOOLEAN.Equal(LightUpSpesification._W(), LightUpSpesification.AnyBox), BOOLEAN.True(), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()), BOOLEAN.False()));
    ITerm.axiom(LightUpSpesification.Transpose(LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B1_2, LightUpSpesification.B1_3, LightUpSpesification.B1_4, LightUpSpesification.B1_5), LightUpSpesification.mkLine(LightUpSpesification.B2_1, LightUpSpesification.B2_2, LightUpSpesification.B2_3, LightUpSpesification.B2_4, LightUpSpesification.B2_5), LightUpSpesification.mkLine(LightUpSpesification.B3_1, LightUpSpesification.B3_2, LightUpSpesification.B3_3, LightUpSpesification.B3_4, LightUpSpesification.B3_5), LightUpSpesification.mkLine(LightUpSpesification.B4_1, LightUpSpesification.B4_2, LightUpSpesification.B4_3, LightUpSpesification.B4_4, LightUpSpesification.B4_5), LightUpSpesification.mkLine(LightUpSpesification.B5_1, LightUpSpesification.B5_2, LightUpSpesification.B5_3, LightUpSpesification.B5_4, LightUpSpesification.B5_5))), LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification.B1_1, LightUpSpesification.B2_1, LightUpSpesification.B3_1, LightUpSpesification.B4_1, LightUpSpesification.B5_1), LightUpSpesification.mkLine(LightUpSpesification.B1_2, LightUpSpesification.B2_2, LightUpSpesification.B3_2, LightUpSpesification.B4_2, LightUpSpesification.B5_2), LightUpSpesification.mkLine(LightUpSpesification.B1_3, LightUpSpesification.B2_3, LightUpSpesification.B3_3, LightUpSpesification.B4_3, LightUpSpesification.B5_3), LightUpSpesification.mkLine(LightUpSpesification.B1_4, LightUpSpesification.B2_4, LightUpSpesification.B3_4, LightUpSpesification.B4_4, LightUpSpesification.B5_4), LightUpSpesification.mkLine(LightUpSpesification.B1_5, LightUpSpesification.B2_5, LightUpSpesification.B3_5, LightUpSpesification.B4_5, LightUpSpesification.B5_5)));
  }

  public static void main(String[] args) {
    System.out.println("Specification:\t" + "LightUpSpesification");

    // Initiate axioms from all specifications
    LightUpSpesification.initAxioms();
    BOOLEAN.initAxioms();
    INTEGER.initAxioms();


    // Execute actions

    final ITerm test1 = ITerm.let("test1", LightUpSpesification.mkLightUp(LightUpSpesification.mkLine(LightUpSpesification._1(), null, null, null, null), LightUpSpesification.mkLine(null, null, null, null, null), LightUpSpesification.mkLine(null, null, null, null, null), LightUpSpesification.mkLine(null, null, null, null, null), LightUpSpesification.mkLine(null, null, null, null, null)));
    Reductions.initReduction(Reductions.Traversal.DFS, false, LightUpSpesification.CheckBox(LightUpSpesification._W()));
  }

}
